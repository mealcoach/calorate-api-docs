---
openapi: 3.0.1
info:
  title: Calorate API
  description: "Allows web-based access to the Calorate\r\nservices that power mealcoach.io."
  termsOfService: https://mealcoach.io/terms-of-service
  contact:
    name: mealcoach.io Administrator
    url: https://mealcoach.io
    email: admin@mealcoach.io
  version: v1
paths:
  "/auth/register":
    post:
      tags:
      - Authentication
      summary: Register
      description: Attempts to register a new user.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Authentication.Web.Models.RegisterRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Authentication.Web.Models.RegisterResponse"
        '400':
          description: When the parameters for the request are invalid.
        '403':
          description: When the user is not authorized.
        '415':
          description: When the request is not the right media type.
  "/auth/confirm":
    post:
      tags:
      - Authentication
      summary: Confirm Registration
      description: Attempts to confirm the registeration of a new user.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Authentication.Web.Models.ConfirmRegistrationRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Authentication.Web.Models.ConfirmRegistrationResponse"
        '400':
          description: When the parameters for the request are invalid.
        '403':
          description: When the user is not authorized.
        '415':
          description: When the request is not the right media type.
  "/auth/changePassword":
    post:
      tags:
      - Authentication
      summary: Change Password
      description: Attempts to change the user's password.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Authentication.Web.Models.ChangePasswordRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
        '400':
          description: When the parameters for the request are invalid.
        '415':
          description: When the request is not the right media type.
  "/auth/resetPassword":
    post:
      tags:
      - Authentication
      summary: Reset Password
      description: "Attempts to reset the user's password. The password will not be
        \r\nreturned on this API call so users will be required to check \r\ntheir
        other enabled communication for their new password."
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Authentication.Web.Models.ResetPasswordRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
        '400':
          description: When the parameters for the request are invalid.
        '415':
          description: When the request is not the right media type.
  "/auth/login":
    post:
      tags:
      - Authentication
      summary: Login
      description: Attempts to log in the user given the required parameters.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Authentication.Web.Models.LoginRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Authentication.Web.Models.LoginResponse"
        '400':
          description: When the parameters for the request are invalid.
        '403':
          description: When the user is not authorized.
        '415':
          description: When the request is not the right media type.
  "/auth/logout":
    get:
      tags:
      - Authentication
      summary: Logout
      description: Attempts to log the user out.
      responses:
        '200':
          description: When the request has completed successfully.
        '400':
          description: When the parameters for the request are invalid.
        '403':
          description: When the user is not authorized.
  "/auth/refresh":
    post:
      tags:
      - Authentication
      summary: Refresh
      description: Attempts to refresh authorization for the user.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Authentication.Web.Models.RefreshRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Authentication.Web.Models.LoginResponse"
        '400':
          description: When the parameters for the request are invalid.
        '403':
          description: When the user is not authorized.
        '415':
          description: When the request is not the right media type.
  "/brands/create":
    post:
      tags:
      - Brands
      summary: Create Brand
      description: Creates a brand with the provided parameters.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Brands.Web.Models.CreateBrandRequest"
        required: true
      responses:
        '200':
          description: When the request is successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Brands.Web.Models.GetBrandsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
        '415':
          description: When the request is not the right media type.
  "/brands/get/{id}":
    get:
      tags:
      - Brands
      summary: Get Brand
      description: Retrieves the brand with the specified ID.
      parameters:
      - name: id
        in: path
        description: The ID of the brand to retrieve details for.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Brands.Web.Models.GetBrandsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/brands/ownedby/{userId}":
    get:
      tags:
      - Brands
      summary: Get Brands Owned By User
      description: Retrieves the brands that are owned by the user.
      parameters:
      - name: userId
        in: path
        description: "Optional. The ID of the user to get owned items. If not supplied,
          \r\nthe user ID will be the requester."
        required: true
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Brands.Web.Models.GetBrandsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/brands/ownedby":
    get:
      tags:
      - Brands
      summary: Get Brands Owned By User
      description: Retrieves the brands that are owned by the user.
      parameters:
      - name: userId
        in: query
        description: "Optional. The ID of the user to get owned items. If not supplied,
          \r\nthe user ID will be the requester."
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Brands.Web.Models.GetBrandsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/brands/visibleto/{userId}":
    get:
      tags:
      - Brands
      summary: Get Brands Visible To User
      description: "Retrieves the brands that are visible to (not necessarily owned
        by \r\nthe) user."
      parameters:
      - name: userId
        in: path
        description: "Optional. The ID of the user to get visible items. If not supplied,
          \r\nthe user ID will be the requester."
        required: true
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Brands.Web.Models.GetBrandsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/brands/visibleto":
    get:
      tags:
      - Brands
      summary: Get Brands Visible To User
      description: "Retrieves the brands that are visible to (not necessarily owned
        by \r\nthe) user."
      parameters:
      - name: userId
        in: query
        description: "Optional. The ID of the user to get visible items. If not supplied,
          \r\nthe user ID will be the requester."
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Brands.Web.Models.GetBrandsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/calculations/bmr":
    post:
      tags:
      - Calculations
      summary: Calculate BMR
      description: Calculates the BMR given the provided parameters.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Calculations.Web.Models.GetBmrRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Calculations.Web.Models.GetBmrResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
        '415':
          description: When the request is not the right media type.
  "/calculations/tdee":
    post:
      tags:
      - Calculations
      summary: Calculate TDEE
      description: Calculates the TDEE given the provided parameters.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Calculations.Web.Models.GetTdeeRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Calculations.Web.Models.GetTdeeResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
        '415':
          description: When the request is not the right media type.
  "/checkins/get/workflow":
    get:
      tags:
      - Checkins
      summary: Get Checkin Workflow
      description: Gets the workflow information for checking in.
      responses:
        '200':
          description: When the request has completed successfully.
        '400':
          description: When the parameters for the request are invalid.
        '403':
          description: When the user is not authorized.
  "/checkins/create":
    post:
      tags:
      - Checkins
      summary: Create Checkin
      description: Creates a checkin given the provided data.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Checkins.Web.Models.CreateCheckinRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Checkins.Web.Models.CreateCheckinResponse"
        '400':
          description: When the parameters for the request are invalid.
        '403':
          description: When the user is not authorized.
        '415':
          description: When the request is not the right media type.
  "/checkins/get/{id}":
    get:
      tags:
      - Checkins
      summary: Get Checkin
      description: Creates a checkin given the provided data.
      parameters:
      - name: id
        in: path
        description: The ID of the checkin to retrieve.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Checkins.Web.Models.GetCheckinResponse"
        '400':
          description: When the parameters for the request are invalid.
        '403':
          description: When the user is not authorized.
        '415':
          description: When the request is not the right media type.
  "/checkins/get/list":
    get:
      tags:
      - Checkins
      summary: Get Checkins
      description: Gets the list of checkins based on the provided parameters.
      parameters:
      - name: limit
        in: query
        description: "The limit of the number of checkins to retrieve. Must be greater
          \r\nthan 0 and less than or equal to 1000."
        required: true
        schema:
          type: integer
          format: int32
      - name: sortDateAscending
        in: query
        description: Specifies whether or not to sort the checkins by date in ascending
          order.
        required: true
        schema:
          type: boolean
      - name: minimumDateTime
        in: query
        description: Optional. The minimum date to consider when checking for recent
          checkins.
        schema:
          type: integer
          format: int64
      - name: maximumDateTime
        in: query
        description: Optional. The maximum date to consider when checking for recent
          checkins.
        schema:
          type: integer
          format: int64
      - name: segmentFilter
        in: query
        description: Optional. The filter to apply to the segments of the checkins.
        schema:
          type: string
      - name: hasMetric
        in: query
        description: Optional. Whether or not the checkin must have a metric specified.
        schema:
          type: boolean
          default: false
      - name: hasGoal
        in: query
        description: Optional. Whether or not the checkin must have a goal specified.
        schema:
          type: boolean
          default: false
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Checkins.Web.Models.GetCheckinsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '403':
          description: When the user is not authorized.
        '415':
          description: When the request is not the right media type.
  "/checkins/get/recent":
    get:
      tags:
      - Checkins
      summary: Get Recent Checkins
      description: Gets the list of recent checkins based on the provided parameters.
      parameters:
      - name: limit
        in: query
        description: "The limit of the number of checkins to retrieve. Must be greater
          \r\nthan 0 and less than or equal to 1000."
        required: true
        schema:
          type: integer
          format: int32
      - name: sortDateAscending
        in: query
        description: Specifies whether or not to sort the checkins by date in ascending
          order.
        required: true
        schema:
          type: boolean
      - name: minimumDateTime
        in: query
        description: Optional. The minimum date to consider when checking for recent
          checkins.
        schema:
          type: integer
          format: int64
      - name: segmentFilter
        in: query
        description: Optional. The filter to apply to the segments of the checkins.
        schema:
          type: string
      - name: hasMetric
        in: query
        description: Optional. Whether or not the checkin must have a metric specified.
        schema:
          type: boolean
          default: false
      - name: hasGoal
        in: query
        description: Optional. Whether or not the checkin must have a goal specified.
        schema:
          type: boolean
          default: false
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Checkins.Web.Models.GetCheckinsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '403':
          description: When the user is not authorized.
        '415':
          description: When the request is not the right media type.
  "/fitbit/authorization/url":
    get:
      tags:
      - Fitbit
      summary: Get Authorization URL
      description: Gets the authorization URL for the user to authorize the application
        to access their Fitbit data.
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Fitbit.Web.Models.GetAuthorizationUrlResponse"
        '401':
          description: When the request is not authenticated.
  "/fitbit/authorization/token":
    get:
      tags:
      - Fitbit
      summary: Get Token
      description: Gets the token for being able to work with Fitbit data on behalf
        of the user.
      parameters:
      - name: code
        in: query
        description: The code that was returned from the authorization URL.
        required: true
        schema:
          type: string
      - name: verifier
        in: query
        description: The verifier that was returned from the authorization URL.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: When the request has completed successfully.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the user is not authorized.
  "/fitbit/sleep/sync":
    get:
      tags:
      - Fitbit
      summary: Sync Sleep
      description: Starts syncing the Fitbit sleep data for the user.
      responses:
        '200':
          description: When the request has completed successfully.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the user is not authorized.
  "/foods/create":
    post:
      tags:
      - Foods
      summary: Create Food
      description: Submits a job for creating a new food to be available on the platform.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Food.Web.Models.CreateFoodRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Food.Web.Models.CreateFoodResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
        '415':
          description: When the request is not the right media type.
  "/foods/get/{id}":
    get:
      tags:
      - Foods
      summary: Get Food Details
      description: Retrieves the details for the provided food ID.
      parameters:
      - name: id
        in: path
        description: The ID of the food to retrieve details for.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Food.Web.Models.GetFoodDetailsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/foods/get/{id}/units":
    get:
      tags:
      - Foods
      summary: Get Food Units
      description: Retrieves the units for the provided food ID.
      parameters:
      - name: id
        in: path
        description: The ID of the food to retrieve units for.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Food.Web.Models.GetFoodUnitsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/foods/ownedby/{userId}":
    get:
      tags:
      - Foods
      summary: Get Foods Owned By User
      description: Retrieves the foods that are owned by the user.
      parameters:
      - name: userId
        in: path
        description: "Optional. The ID of the user to get owned items. If not supplied,
          \r\nthe user ID will be the requester."
        required: true
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Food.Web.Models.GetFoodsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/foods/ownedby":
    get:
      tags:
      - Foods
      summary: Get Foods Owned By User
      description: Retrieves the foods that are owned by the user.
      parameters:
      - name: userId
        in: query
        description: "Optional. The ID of the user to get owned items. If not supplied,
          \r\nthe user ID will be the requester."
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Food.Web.Models.GetFoodsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/foods/visibleto/{userId}":
    get:
      tags:
      - Foods
      summary: Get Foods Visible To User
      description: "Retrieves the foods that are visible to (not necessarily owned
        by \r\nthe) user."
      parameters:
      - name: userId
        in: path
        description: "Optional. The ID of the user to get visible items. If not supplied,
          \r\nthe user ID will be the requester."
        required: true
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Food.Web.Models.GetFoodsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/foods/visibleto":
    get:
      tags:
      - Foods
      summary: Get Foods Visible To User
      description: "Retrieves the foods that are visible to (not necessarily owned
        by \r\nthe) user."
      parameters:
      - name: userId
        in: query
        description: "Optional. The ID of the user to get visible items. If not supplied,
          \r\nthe user ID will be the requester."
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Food.Web.Models.GetFoodsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/foods/search":
    post:
      tags:
      - Foods
      summary: Keyword Search
      description: Performs a keyword search given the specified terms.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Food.Web.Models.KeywordSearchRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Food.Web.Models.KeywordSearchResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
        '415':
          description: When the request is not the right media type.
  "/foods/units/beautify":
    post:
      tags:
      - Foods
      summary: Beautify Units
      description: "Attempts to translate units into a format that is more friendly
        \r\nto be consumed by an end user instead of programmatically."
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Food.Web.Models.BeautifyUnitsRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Food.Web.Models.BeautifyUnitsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '415':
          description: When the request is not the right media type.
  "/jobs/start":
    post:
      tags:
      - Jobs
      summary: Start Job
      description: Tells the service to mark a new job for tracking.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Jobs.Web.Models.StartJobRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Jobs.Web.Models.JobSubmittedResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
        '415':
          description: When the request is not the right media type.
  "/jobs/list/running":
    get:
      tags:
      - Jobs
      summary: Get Running Jobs
      description: Allows privileged users to get the list of running jobs.
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/jobs/get/{id}":
    get:
      tags:
      - Jobs
      summary: Get Job
      description: Gets the job information for the specified ID.
      parameters:
      - name: id
        in: path
        description: The ID of the job.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Jobs.Web.Models.GetJobResponse"
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/generate/create":
    post:
      tags:
      - Mealplan Generation
      summary: Generate Mealplan
      description: Submits a job for generating a new mealplan.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Generation.Web.Models.GenerateMealplanRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Generation.Web.Models.GenerateMealplanResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
        '415':
          description: When the request is not the right media type.
  "/generate/mealplan":
    post:
      tags:
      - Mealplan Generation
      summary: Generate Mealplan
      description: Submits a job for generating a new mealplan.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Generation.Web.Models.GenerateMealplanRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Generation.Web.Models.GenerateMealplanResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
        '415':
          description: When the request is not the right media type.
  "/generate/mealplan/check":
    post:
      tags:
      - Mealplan Generation
      summary: Can Generate Mealplan
      description: Determines if a mealplan can be generated from the provided parameters.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Generation.Web.Models.GenerateMealplanRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
        '415':
          description: When the request is not the right media type.
  "/generate/get/mealplan/parameters/{mealplanId}":
    get:
      tags:
      - Mealplan Generation
      summary: Get Raw Mealplan Generation Parameters
      description: Gets the parameters that were used to generate the mealplan.
      parameters:
      - name: mealplanId
        in: path
        description: The ID of the mealplan.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: When the request has completed successfully.
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/mealplans/get/list":
    get:
      tags:
      - Mealplans
      summary: Get Mealplans Visible To User
      description: Gets the mealplans visible to the user.
      responses:
        '200':
          description: When the request has completed successfully.
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/mealplans/get/{id}":
    get:
      tags:
      - Mealplans
      summary: Get Mealplan
      description: Gets the mealplan for the specified id.
      parameters:
      - name: id
        in: path
        description: The ID of the mealplan to get.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: When the request has completed successfully.
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/mealplans/get/{id}/json":
    get:
      tags:
      - Mealplans
      summary: Get Mealplan
      description: Gets the mealplan for the specified id.
      parameters:
      - name: id
        in: path
        description: The ID of the mealplan to get.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: When the request has completed successfully.
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/mealplans/get/{id}/ingredients/json":
    get:
      tags:
      - Mealplans
      summary: Get Mealplan Ingredients
      description: Gets the mealplan ingredients for the specified mealplan id.
      parameters:
      - name: id
        in: path
        description: The ID of the mealplan to get ingredients for.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: When the request has completed successfully.
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/mealplans/get/{id}/rollup/json":
    get:
      tags:
      - Mealplans
      summary: Get Mealplan Rollup
      description: Gets the mealplan rollup for the specified mealplan id.
      parameters:
      - name: id
        in: path
        description: The ID of the mealplan to get the rollup for.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: When the request has completed successfully.
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/mealplans/review/{id}":
    post:
      tags:
      - Mealplans
      summary: Review Mealplan
      description: Reviews the specified mealplan.
      parameters:
      - name: id
        in: path
        description: The ID of the mealplan to review.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Mealplans.Web.Models.ReviewMealplanRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
        '415':
          description: When the request is not the right media type.
  "/nutrients/get/list":
    get:
      tags:
      - Nutrients
      summary: Get Nutrients
      description: Retrieves the list of nutrients.
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Nutrients.Web.Models.GetNutrientsResponse"
        '401':
          description: When the request is not authenticated.
  "/recipes/create":
    post:
      tags:
      - Recipes
      summary: Create Recipe
      description: Submits a job for creating a new recipe to be available on the
        platform.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.CreateRecipeRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.CreateRecipeResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
        '415':
          description: When the request is not the right media type.
  "/recipes/preview":
    post:
      tags:
      - Recipes
      summary: Preview Recipe
      description: Previews the recipe given the provided details.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.PreviewRecipeRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.PreviewRecipeResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
        '415':
          description: When the request is not the right media type.
  "/recipes/get/{id}":
    get:
      tags:
      - Recipes
      summary: Get Recipe
      description: Retrieves the recipe for the specified ID.
      parameters:
      - name: id
        in: path
        description: The ID of the recipe to retrieve.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.GetRecipeDetailsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/recipes/ownedby/{userId}":
    get:
      tags:
      - Recipes
      summary: Get Recipes Owned By User
      description: Retrieves the recipes that are owned by the user.
      parameters:
      - name: userId
        in: path
        description: "Optional. The ID of the user to get owned items. If not supplied,
          \r\nthe user ID will be the requester."
        required: true
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.GetRecipesResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/recipes/ownedby":
    get:
      tags:
      - Recipes
      summary: Get Recipes Owned By User
      description: Retrieves the recipes that are owned by the user.
      parameters:
      - name: userId
        in: query
        description: "Optional. The ID of the user to get owned items. If not supplied,
          \r\nthe user ID will be the requester."
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.GetRecipesResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/recipes/visibleto/{userId}":
    get:
      tags:
      - Recipes
      summary: Get Recipes Visible To User
      description: Retrieves the recipes that are visible to the user.
      parameters:
      - name: userId
        in: path
        description: "Optional. The ID of the user to get visible items. If not supplied,
          \r\nthe user ID will be the requester."
        required: true
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.GetRecipesResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/recipes/visibleto":
    get:
      tags:
      - Recipes
      summary: Get Recipes Visible To User
      description: Retrieves the recipes that are visible to the user.
      parameters:
      - name: userId
        in: query
        description: "Optional. The ID of the user to get visible items. If not supplied,
          \r\nthe user ID will be the requester."
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.GetRecipesResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/examine/recipe":
    post:
      tags:
      - Scraping
      summary: Scrape URL
      description: Scrapes the URL for recipe information.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Scraping.Web.Models.ScrapeUrlRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Scraping.Web.Models.ScrapeUrlResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
        '415':
          description: When the request is not the right media type.
  "/tags/get/{id}":
    get:
      tags:
      - Tags
      summary: Get Tag
      description: Retrieves the tag for the provided ID.
      parameters:
      - name: id
        in: path
        description: The ID of the tag to retrieve details for.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Tagging.Web.Models.GetTagsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/tags/ownedby/{userId}":
    get:
      tags:
      - Tags
      summary: Get Tags Owned By User
      description: Retrieves the tags that are owned by the user.
      parameters:
      - name: userId
        in: path
        description: "Optional. The ID of the user to get owned items. If not supplied,
          \r\nthe user ID will be the requester."
        required: true
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Tagging.Web.Models.GetTagsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/tags/ownedby":
    get:
      tags:
      - Tags
      summary: Get Tags Owned By User
      description: Retrieves the tags that are owned by the user.
      parameters:
      - name: userId
        in: query
        description: "Optional. The ID of the user to get owned items. If not supplied,
          \r\nthe user ID will be the requester."
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Tagging.Web.Models.GetTagsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/tags/visibleto/{userId}":
    get:
      tags:
      - Tags
      summary: Get Tags Visible To User
      description: Retrieves the tags that are visible to the user.
      parameters:
      - name: userId
        in: path
        description: "Optional. The ID of the user to get visible items. If not supplied,
          \r\nthe user ID will be the requester."
        required: true
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Tagging.Web.Models.GetTagsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/tags/visibleto":
    get:
      tags:
      - Tags
      summary: Get Tags Visible To User
      description: Retrieves the tags that are visible to the user.
      parameters:
      - name: userId
        in: query
        description: "Optional. The ID of the user to get visible items. If not supplied,
          \r\nthe user ID will be the requester."
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: "Optional. The offset into the results. If not supplied, the
          default\r\nis 0."
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: "Optional. The size of the result set. If not supplied, the default
          \r\nis 100. The maximum value is 100."
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Tagging.Web.Models.GetTagsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/tags/categories/list":
    get:
      tags:
      - Tags
      summary: Get Tag Categories
      description: Retrieves the tag categories.
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Tagging.Web.Models.GetTagCategoriesResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
  "/units/get/standard/list":
    get:
      tags:
      - Units
      summary: Get All Standard Units
      description: Retrieves the set of all standard units in the system.
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Units.Web.Models.GetUnitsResponse"
        '401':
          description: When the request is not authenticated.
        '404':
          description: When the unit is not found.
  "/units/get/base/mass":
    get:
      tags:
      - Units
      summary: Get Mass Base Unit
      description: Retrieves the unit used as the base unit for mass.
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Units.Web.Models.Unit"
        '401':
          description: When the request is not authenticated.
  "/units/get/base/volume":
    get:
      tags:
      - Units
      summary: Get Volume Base Unit
      description: Retrieves the unit used as the base unit for volume.
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Units.Web.Models.Unit"
        '401':
          description: When the request is not authenticated.
  "/units/get/{id}":
    get:
      tags:
      - Units
      summary: Get Unit
      description: Retrieves the unit for the specified unit ID.
      parameters:
      - name: id
        in: path
        description: The ID to retrieve the unit for.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Units.Web.Models.Unit"
        '401':
          description: When the request is not authenticated.
        '404':
          description: When the unit is not found.
  "/units/get/base/{id}":
    get:
      tags:
      - Units
      summary: Get Base Unit of Unit
      description: Retrieves the base unit of the specified unit ID.
      parameters:
      - name: id
        in: path
        description: The ID of the unit to retrieve the base unit for.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Units.Web.Models.Unit"
        '401':
          description: When the request is not authenticated.
        '404':
          description: When the unit is not found.
  "/units/convert":
    post:
      tags:
      - Units
      summary: Convert Units
      description: Converts a set of units from one type to another.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Units.Web.Models.ConvertUnitsRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Units.Web.Models.ConvertUnitsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '415':
          description: When the request is not the right media type.
  "/units/beautify":
    post:
      tags:
      - Units
      summary: Beautify Units
      description: "Transforms programmatic representation of units data into \r\nsomething
        that is more human-friendly and ready to be used in a \r\nuser interface."
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Units.Web.Models.BeautifyUnitsRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Units.Web.Models.BeautifyUnitsResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '415':
          description: When the request is not the right media type.
  "/users/metadata/update":
    post:
      tags:
      - Users
      summary: Update Metadata
      description: Updates the metadata for the user.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Users.Web.Models.UpdateUserMetadataRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
        '415':
          description: When the request is not the right media type.
  "/users/metadata/filter":
    post:
      tags:
      - Users
      summary: Filter Metadata
      description: Filters the metadata for the user.
      requestBody:
        description: The data provided to fulfill the request.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calorate.Users.Web.Models.FilterUserMetadataRequest"
        required: true
      responses:
        '200':
          description: When the request has completed successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calorate.Users.Web.Models.FilterUserMetadataResponse"
        '400':
          description: When the parameters for the request are invalid.
        '401':
          description: When the request is not authenticated.
        '403':
          description: When the request is not authorized.
        '415':
          description: When the request is not the right media type.
components:
  schemas:
    Calorate.Authentication.Web.Models.ChangePasswordRequest:
      type: object
      properties:
        accessToken:
          type: string
          nullable: true
        previousPassword:
          type: string
          nullable: true
        proposedPassword:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Authentication.Web.Models.ConfirmRegistrationRequest:
      type: object
      properties:
        email:
          type: string
          nullable: true
        confirmationCode:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Authentication.Web.Models.ConfirmRegistrationResponse:
      type: object
      properties:
        userId:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Authentication.Web.Models.LoginChallenge:
      type: object
      properties:
        challenge:
          type: string
          nullable: true
        parameters:
          type: object
          additionalProperties:
            type: string
          nullable: true
      additionalProperties: false
    Calorate.Authentication.Web.Models.LoginRequest:
      type: object
      properties:
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Authentication.Web.Models.LoginResponse:
      type: object
      properties:
        userId:
          type: string
          nullable: true
        userType:
          type: integer
          format: int32
          nullable: true
        email:
          type: string
          nullable: true
        idToken:
          type: string
          nullable: true
        accessToken:
          type: string
          nullable: true
        refreshToken:
          type: string
          nullable: true
        expiryDateTimeUtc:
          type: string
          format: date-time
          nullable: true
        loginChallenge:
          "$ref": "#/components/schemas/Calorate.Authentication.Web.Models.LoginChallenge"
      additionalProperties: false
    Calorate.Authentication.Web.Models.RefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Authentication.Web.Models.RegisterRequest:
      type: object
      properties:
        password:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties:
            type: string
          nullable: true
      additionalProperties: false
    Calorate.Authentication.Web.Models.RegisterResponse:
      type: object
      properties:
        userId:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Authentication.Web.Models.ResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Brands.Web.Models.Brand:
      type: object
      properties:
        brandId:
          type: string
          nullable: true
        ownerUserId:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Brands.Web.Models.CreateBrandRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Brands.Web.Models.GetBrandsResponse:
      type: object
      properties:
        brands:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Brands.Web.Models.Brand"
          nullable: true
      additionalProperties: false
    Calorate.Calculations.Web.Models.GetBmrRequest:
      type: object
      properties:
        mass:
          "$ref": "#/components/schemas/Calorate.Calculations.Web.Models.UnparsedQuantity"
        leanBodyMass:
          "$ref": "#/components/schemas/Calorate.Calculations.Web.Models.UnparsedQuantity"
        height:
          "$ref": "#/components/schemas/Calorate.Calculations.Web.Models.UnparsedQuantity"
        ageYears:
          type: integer
          format: int32
          nullable: true
        male:
          type: boolean
          nullable: true
      additionalProperties: false
    Calorate.Calculations.Web.Models.GetBmrResponse:
      type: object
      properties:
        bmr:
          type: number
          format: float
      additionalProperties: false
    Calorate.Calculations.Web.Models.GetTdeeRequest:
      type: object
      properties:
        activityFactor:
          type: number
          format: double
        bmr:
          type: number
          format: double
          nullable: true
        mass:
          "$ref": "#/components/schemas/Calorate.Calculations.Web.Models.UnparsedQuantity"
        leanBodyMass:
          "$ref": "#/components/schemas/Calorate.Calculations.Web.Models.UnparsedQuantity"
        height:
          "$ref": "#/components/schemas/Calorate.Calculations.Web.Models.UnparsedQuantity"
        ageYears:
          type: integer
          format: int32
          nullable: true
        male:
          type: boolean
          nullable: true
      additionalProperties: false
    Calorate.Calculations.Web.Models.GetTdeeResponse:
      type: object
      properties:
        tdee:
          type: number
          format: float
      additionalProperties: false
    Calorate.Calculations.Web.Models.UnparsedQuantity:
      type: object
      properties:
        amount:
          type: number
          format: float
        unitId:
          type: string
          nullable: true
        unitSymbol:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Checkins.Web.Models.Checkin:
      type: object
      properties:
        id:
          type: string
          nullable: true
        ownerId:
          type: string
          nullable: true
        createdAtUtc:
          type: string
          format: date-time
        segments:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Checkins.Web.Models.CheckinSegment"
          nullable: true
      additionalProperties: false
    Calorate.Checkins.Web.Models.CheckinGoal:
      type: object
      properties:
        typeId:
          type: string
          nullable: true
        targetDateTimeUtc:
          type: string
          format: date-time
        value:
          nullable: true
      additionalProperties: false
    Calorate.Checkins.Web.Models.CheckinSegment:
      type: object
      properties:
        typeId:
          type: string
          nullable: true
        metrics:
          type: object
          additionalProperties: {}
          nullable: true
        goals:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/Calorate.Checkins.Web.Models.CheckinGoal"
          nullable: true
      additionalProperties: false
    Calorate.Checkins.Web.Models.CreateCheckinRequest:
      type: object
      properties:
        segments:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Checkins.Web.Models.CheckinSegment"
          nullable: true
      additionalProperties: false
    Calorate.Checkins.Web.Models.CreateCheckinResponse:
      type: object
      properties:
        checkin:
          "$ref": "#/components/schemas/Calorate.Checkins.Web.Models.Checkin"
      additionalProperties: false
    Calorate.Checkins.Web.Models.GetCheckinResponse:
      type: object
      properties:
        checkin:
          "$ref": "#/components/schemas/Calorate.Checkins.Web.Models.Checkin"
      additionalProperties: false
    Calorate.Checkins.Web.Models.GetCheckinsResponse:
      type: object
      properties:
        checkins:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Checkins.Web.Models.Checkin"
          nullable: true
      additionalProperties: false
    Calorate.Fitbit.Web.Models.GetAuthorizationUrlResponse:
      type: object
      properties:
        url:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        verifier:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Food.Web.Models.BeautifyConversion:
      type: object
      properties:
        foodId:
          type: string
          nullable: true
        sourceUnit:
          type: string
          nullable: true
        amount:
          type: number
          format: double
          nullable: true
        overrideUnit:
          type: string
          nullable: true
        overrideDecimalPlaces:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    Calorate.Food.Web.Models.BeautifyConversionResult:
      type: object
      properties:
        beautifiedQuantity:
          type: string
          nullable: true
        unit:
          "$ref": "#/components/schemas/Calorate.Food.Web.Models.FoodUnit"
        amount:
          type: number
          format: double
          nullable: true
        success:
          type: boolean
      additionalProperties: false
    Calorate.Food.Web.Models.BeautifyUnitsRequest:
      type: object
      properties:
        beautifyMode:
          type: string
          nullable: true
        conversions:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Food.Web.Models.BeautifyConversion"
          nullable: true
      additionalProperties: false
    Calorate.Food.Web.Models.BeautifyUnitsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Food.Web.Models.BeautifyConversionResult"
          nullable: true
      additionalProperties: false
    Calorate.Food.Web.Models.CreateFoodRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        ingredients:
          type: string
          nullable: true
        prepared:
          type: boolean
          nullable: true
        servingSize:
          "$ref": "#/components/schemas/Calorate.Food.Web.Models.Quantity"
        brandId:
          type: string
          nullable: true
        base64NutritionImage:
          type: string
          nullable: true
        base64BarcodeImage:
          type: string
          nullable: true
        nutrition:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/Calorate.Food.Web.Models.Quantity"
          nullable: true
        allowReviewForSharedAccess:
          type: boolean
        tagIds:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    Calorate.Food.Web.Models.CreateFoodResponse:
      type: object
      properties:
        createFoodJobId:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Food.Web.Models.FoodDetailsItem:
      type: object
      properties:
        id:
          type: string
          nullable: true
        friendlyName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        ingredients:
          type: string
          nullable: true
        creatorId:
          type: string
          nullable: true
        createdDateTimeUtc:
          type: string
          format: date-time
        servingSize:
          "$ref": "#/components/schemas/Calorate.Food.Web.Models.Quantity"
        nutrients:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: number
              format: double
          nullable: true
      additionalProperties: false
    Calorate.Food.Web.Models.FoodListItem:
      type: object
      properties:
        foodId:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Food.Web.Models.FoodUnit:
      type: object
      properties:
        unitId:
          type: string
          nullable: true
        unitTypeId:
          type: string
          nullable: true
        symbol:
          type: string
          nullable: true
        conversion:
          type: number
          format: double
        specificFoodId:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Food.Web.Models.GetFoodDetailsResponse:
      type: object
      properties:
        food:
          "$ref": "#/components/schemas/Calorate.Food.Web.Models.FoodDetailsItem"
      additionalProperties: false
    Calorate.Food.Web.Models.GetFoodUnitsResponse:
      type: object
      properties:
        foodUnits:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Food.Web.Models.FoodUnit"
          nullable: true
      additionalProperties: false
    Calorate.Food.Web.Models.GetFoodsResponse:
      type: object
      properties:
        offset:
          type: integer
          format: int32
        food:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Food.Web.Models.FoodListItem"
          nullable: true
        count:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false
    Calorate.Food.Web.Models.KeywordSearchRequest:
      type: object
      properties:
        terms:
          type: array
          items:
            type: string
          nullable: true
        offset:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
      additionalProperties: false
    Calorate.Food.Web.Models.KeywordSearchResponse:
      type: object
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Food.Web.Models.FoodListItem"
          nullable: true
        offset:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false
    Calorate.Food.Web.Models.Quantity:
      type: object
      properties:
        amount:
          type: number
          format: float
        unitId:
          type: string
          nullable: true
        unitSymbol:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Generation.Web.Models.GenerateMealplanRequest:
      type: object
      properties:
        mealplanRules:
          "$ref": "#/components/schemas/Calorate.Generation.Web.Models.MealplanRules"
        mealplanName:
          type: string
          nullable: true
        notesForClient:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Generation.Web.Models.GenerateMealplanResponse:
      type: object
      properties:
        jobId:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Generation.Web.Models.MealplanDayRules:
      type: object
      properties:
        rules:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
          nullable: true
        mealRules:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Generation.Web.Models.MealplanMealRules"
          nullable: true
      additionalProperties: false
    Calorate.Generation.Web.Models.MealplanMealRules:
      type: object
      properties:
        rules:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
          nullable: true
      additionalProperties: false
    Calorate.Generation.Web.Models.MealplanRules:
      type: object
      properties:
        rules:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
          nullable: true
        dayRules:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Generation.Web.Models.MealplanDayRules"
          nullable: true
      additionalProperties: false
    Calorate.Jobs.Web.Models.GetJobResponse:
      type: object
      properties:
        jobId:
          type: string
          nullable: true
        jobType:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
        progress:
          type: number
          format: float
        createdDateTimeUtc:
          type: string
          format: date-time
        modifiedDateTimeUtc:
          type: string
          format: date-time
        errorMessage:
          type: string
          nullable: true
        jobOutputId:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Jobs.Web.Models.JobSubmittedResponse:
      type: object
      properties:
        jobId:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Jobs.Web.Models.StartJobRequest:
      type: object
      properties:
        jobId:
          type: string
          nullable: true
        ownerId:
          type: string
          nullable: true
        jobType:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Mealplans.Web.Models.ReviewMealplanRequest:
      type: object
      properties:
        positiveReview:
          type: boolean
      additionalProperties: false
    Calorate.Nutrients.Web.Models.GetNutrientsResponse:
      type: object
      properties:
        nutrients:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Nutrients.Web.Models.Nutrient"
          nullable: true
      additionalProperties: false
    Calorate.Nutrients.Web.Models.Nutrient:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        symbol:
          type: string
          nullable: true
        unitId:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Recipes.Web.Models.CreateRecipeRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
        imageUrl:
          type: string
          nullable: true
        servingSize:
          type: integer
          format: int32
          nullable: true
        prepTimeMinutes:
          type: integer
          format: int32
          nullable: true
        cookTimeMinutes:
          type: integer
          format: int32
          nullable: true
        allowReviewForSharedAccess:
          type: boolean
          nullable: true
        steps:
          type: array
          items:
            type: string
          nullable: true
        ingredients:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.IngredientRange"
          nullable: true
        tagIds:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    Calorate.Recipes.Web.Models.CreateRecipeResponse:
      type: object
      properties:
        createRecipeJobId:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Recipes.Web.Models.GetRecipeDetailsResponse:
      type: object
      properties:
        recipeDetails:
          "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.RecipeDetails"
      additionalProperties: false
    Calorate.Recipes.Web.Models.GetRecipesResponse:
      type: object
      properties:
        recipes:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.Recipe"
          nullable: true
      additionalProperties: false
    Calorate.Recipes.Web.Models.Ingredient:
      type: object
      properties:
        foodId:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalUrl:
          type: string
          nullable: true
        quantity:
          "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.Quantity"
      additionalProperties: false
    Calorate.Recipes.Web.Models.IngredientRange:
      type: object
      properties:
        foodId:
          type: string
          nullable: true
        minimumAmountPerServing:
          type: number
          format: float
          nullable: true
        maximumAmountPerServing:
          type: number
          format: float
          nullable: true
        stepAmountPerServing:
          type: number
          format: float
          nullable: true
        amountTasteOnly:
          type: boolean
        measurementUnit:
          type: string
          nullable: true
        userPreferredMeasurementUnit:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Recipes.Web.Models.Meal:
      type: object
      properties:
        recipeDefinitionId:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        currentServings:
          type: integer
          format: int32
        totalServings:
          type: integer
          format: int32
        externalUrl:
          type: string
          nullable: true
        steps:
          type: array
          items:
            type: string
          nullable: true
        nutritionForCurrentServings:
          type: object
          additionalProperties:
            type: number
            format: double
          nullable: true
        ingredientsPerServing:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.Ingredient"
          nullable: true
      additionalProperties: false
    Calorate.Recipes.Web.Models.PreviewRecipeRequest:
      type: object
      properties:
        parameters:
          "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.CreateRecipeRequest"
        servingsToSimulate:
          type: integer
          format: int32
      additionalProperties: false
    Calorate.Recipes.Web.Models.PreviewRecipeResponse:
      type: object
      properties:
        meal:
          "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.Meal"
      additionalProperties: false
    Calorate.Recipes.Web.Models.Quantity:
      type: object
      properties:
        unitId:
          type: string
          nullable: true
        authoredUnitId:
          type: string
          nullable: true
        value:
          type: number
          format: double
      additionalProperties: false
    Calorate.Recipes.Web.Models.Recipe:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
        imageUrl:
          type: string
          nullable: true
        servingSize:
          type: integer
          format: int32
        prepTimeMinutes:
          type: integer
          format: int32
          nullable: true
        cookTimeMinutes:
          type: integer
          format: int32
          nullable: true
        reviewState:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Recipes.Web.Models.RecipeDetails:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
        imageUrl:
          type: string
          nullable: true
        servingSize:
          type: integer
          format: int32
        prepTimeMinutes:
          type: integer
          format: int32
          nullable: true
        cookTimeMinutes:
          type: integer
          format: int32
          nullable: true
        reviewState:
          type: string
          nullable: true
        orderedSteps:
          type: array
          items:
            type: string
          nullable: true
        tagIds:
          type: array
          items:
            type: string
          nullable: true
        ingredients:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Recipes.Web.Models.IngredientRange"
          nullable: true
      additionalProperties: false
    Calorate.Scraping.Web.Models.ScrapeUrlRequest:
      type: object
      properties:
        url:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Scraping.Web.Models.ScrapeUrlResponse:
      type: object
      properties:
        recipe:
          "$ref": "#/components/schemas/Calorate.Scraping.Web.Models.ScrapedRecipe"
      additionalProperties: false
    Calorate.Scraping.Web.Models.ScrapedIngredient:
      type: object
      properties:
        foodId:
          type: string
          nullable: true
        rawFoodText:
          type: string
          nullable: true
        minimumAmountPerServing:
          type: number
          format: double
          nullable: true
        maximumAmountPerServing:
          type: number
          format: double
          nullable: true
        stepAmountPerServing:
          type: number
          format: double
          nullable: true
        rawAmountText:
          type: string
          nullable: true
        unitId:
          type: string
          nullable: true
        rawUnitText:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Scraping.Web.Models.ScrapedRecipe:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        servings:
          type: number
          format: double
          nullable: true
        url:
          type: string
          nullable: true
        imageUrl:
          type: string
          nullable: true
        ingredients:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Scraping.Web.Models.ScrapedIngredient"
          nullable: true
        prepTime:
          type: string
          format: date-span
          nullable: true
        cookTime:
          type: string
          format: date-span
          nullable: true
        directions:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    Calorate.Tagging.Web.Models.GetTagCategoriesResponse:
      type: object
      properties:
        tagCategories:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Tagging.Web.Models.TagCategory"
          nullable: true
      additionalProperties: false
    Calorate.Tagging.Web.Models.GetTagsResponse:
      type: object
      properties:
        tags:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Tagging.Web.Models.Tag"
          nullable: true
      additionalProperties: false
    Calorate.Tagging.Web.Models.Tag:
      type: object
      properties:
        tagId:
          type: string
          nullable: true
        ownerUserId:
          type: string
          nullable: true
        categoryId:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Tagging.Web.Models.TagCategory:
      type: object
      properties:
        id:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Units.Web.Models.BeautifyConversion:
      type: object
      properties:
        sourceUnit:
          type: string
          nullable: true
        amount:
          type: number
          format: double
          nullable: true
        overrideUnit:
          type: string
          nullable: true
        overrideDecimalPlaces:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    Calorate.Units.Web.Models.BeautifyConversionResult:
      type: object
      properties:
        beautifiedQuantity:
          type: string
          nullable: true
        unit:
          "$ref": "#/components/schemas/Calorate.Units.Web.Models.Unit"
        amount:
          type: number
          format: double
          nullable: true
        success:
          type: boolean
      additionalProperties: false
    Calorate.Units.Web.Models.BeautifyUnitsRequest:
      type: object
      properties:
        beautifyMode:
          type: string
          nullable: true
        conversions:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Units.Web.Models.BeautifyConversion"
          nullable: true
      additionalProperties: false
    Calorate.Units.Web.Models.BeautifyUnitsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Units.Web.Models.BeautifyConversionResult"
          nullable: true
      additionalProperties: false
    Calorate.Units.Web.Models.Conversion:
      type: object
      properties:
        sourceUnit:
          type: string
          nullable: true
        destinationUnit:
          type: string
          nullable: true
        amount:
          type: number
          format: double
      additionalProperties: false
    Calorate.Units.Web.Models.ConversionResult:
      type: object
      properties:
        sourceUnit:
          "$ref": "#/components/schemas/Calorate.Units.Web.Models.Unit"
        destinationUnit:
          "$ref": "#/components/schemas/Calorate.Units.Web.Models.Unit"
        amount:
          type: number
          format: double
          nullable: true
        success:
          type: boolean
      additionalProperties: false
    Calorate.Units.Web.Models.ConvertUnitsRequest:
      type: object
      properties:
        conversions:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Units.Web.Models.Conversion"
          nullable: true
      additionalProperties: false
    Calorate.Units.Web.Models.ConvertUnitsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Units.Web.Models.ConversionResult"
          nullable: true
      additionalProperties: false
    Calorate.Units.Web.Models.GetUnitsResponse:
      type: object
      properties:
        units:
          type: array
          items:
            "$ref": "#/components/schemas/Calorate.Units.Web.Models.Unit"
          nullable: true
      additionalProperties: false
    Calorate.Units.Web.Models.Unit:
      type: object
      properties:
        id:
          type: string
          nullable: true
        symbol:
          type: string
          nullable: true
        typeId:
          type: string
          nullable: true
        conversion:
          type: number
          format: double
        exclusiveId:
          type: string
          nullable: true
      additionalProperties: false
    Calorate.Users.Web.Models.FilterUserMetadataRequest:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    Calorate.Users.Web.Models.FilterUserMetadataResponse:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
      additionalProperties: false
    Calorate.Users.Web.Models.UpdateUserMetadataRequest:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
      additionalProperties: false
